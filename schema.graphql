# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  isSuperAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  isSuperAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  isSuperAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  isSuperAdmin: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  isSuperAdmin: Boolean
  createdAt: DateTime
}

type SourceType {
  id: ID!
  name: String
  createdAt: DateTime
}

input SourceTypeWhereUniqueInput {
  id: ID
}

input SourceTypeWhereInput {
  AND: [SourceTypeWhereInput!]
  OR: [SourceTypeWhereInput!]
  NOT: [SourceTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
}

input SourceTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input SourceTypeUpdateInput {
  name: String
  createdAt: DateTime
}

input SourceTypeUpdateArgs {
  where: SourceTypeWhereUniqueInput!
  data: SourceTypeUpdateInput!
}

input SourceTypeCreateInput {
  name: String
  createdAt: DateTime
}

type Region {
  id: ID!
  name: String
  createdAt: DateTime
}

input RegionWhereUniqueInput {
  id: ID
}

input RegionWhereInput {
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
}

input RegionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input RegionUpdateInput {
  name: String
  createdAt: DateTime
}

input RegionUpdateArgs {
  where: RegionWhereUniqueInput!
  data: RegionUpdateInput!
}

input RegionCreateInput {
  name: String
  createdAt: DateTime
}

type Language {
  id: ID!
  name: String
  createdAt: DateTime
}

input LanguageWhereUniqueInput {
  id: ID
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
}

input LanguageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input LanguageUpdateInput {
  name: String
  createdAt: DateTime
}

input LanguageUpdateArgs {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateInput!
}

input LanguageCreateInput {
  name: String
  createdAt: DateTime
}

type Country {
  id: ID!
  name: String
  createdAt: DateTime
}

input CountryWhereUniqueInput {
  id: ID
  name: String
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
}

input CountryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input CountryUpdateInput {
  name: String
  createdAt: DateTime
}

input CountryUpdateArgs {
  where: CountryWhereUniqueInput!
  data: CountryUpdateInput!
}

input CountryCreateInput {
  name: String
  createdAt: DateTime
}

type Source {
  id: ID!
  authority_name: String
  url: String
  country: Country
  region: Region
  coverage: Coverage
  type: Type
  source_type: SourceType
  language: Language
  format: Format
  comment: String
  cost: Cost
  keys(where: SourceKeyWhereInput! = {}, orderBy: [SourceKeyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SourceKeyWhereUniqueInput): [SourceKey!]
  keysCount(where: SourceKeyWhereInput! = {}): Int
  createdAt: DateTime
  to_crawler: Boolean
  to_deo: Boolean
  createdBy: User
}

input SourceWhereUniqueInput {
  id: ID
}

input SourceWhereInput {
  AND: [SourceWhereInput!]
  OR: [SourceWhereInput!]
  NOT: [SourceWhereInput!]
  id: IDFilter
  authority_name: StringFilter
  url: StringFilter
  country: CountryWhereInput
  region: RegionWhereInput
  coverage: CoverageWhereInput
  type: TypeWhereInput
  source_type: SourceTypeWhereInput
  language: LanguageWhereInput
  format: FormatWhereInput
  comment: StringFilter
  cost: CostWhereInput
  keys: SourceKeyManyRelationFilter
  createdAt: DateTimeNullableFilter
  to_crawler: BooleanFilter
  to_deo: BooleanFilter
  createdBy: UserWhereInput
}

input SourceKeyManyRelationFilter {
  every: SourceKeyWhereInput
  some: SourceKeyWhereInput
  none: SourceKeyWhereInput
}

input SourceOrderByInput {
  id: OrderDirection
  authority_name: OrderDirection
  url: OrderDirection
  comment: OrderDirection
  createdAt: OrderDirection
  to_crawler: OrderDirection
  to_deo: OrderDirection
}

input SourceUpdateInput {
  authority_name: String
  url: String
  country: CountryRelateToOneForUpdateInput
  region: RegionRelateToOneForUpdateInput
  coverage: CoverageRelateToOneForUpdateInput
  type: TypeRelateToOneForUpdateInput
  source_type: SourceTypeRelateToOneForUpdateInput
  language: LanguageRelateToOneForUpdateInput
  format: FormatRelateToOneForUpdateInput
  comment: String
  cost: CostRelateToOneForUpdateInput
  keys: SourceKeyRelateToManyForUpdateInput
  createdAt: DateTime
  to_crawler: Boolean
  to_deo: Boolean
  createdBy: UserRelateToOneForUpdateInput
}

input CountryRelateToOneForUpdateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
}

input RegionRelateToOneForUpdateInput {
  create: RegionCreateInput
  connect: RegionWhereUniqueInput
  disconnect: Boolean
}

input CoverageRelateToOneForUpdateInput {
  create: CoverageCreateInput
  connect: CoverageWhereUniqueInput
  disconnect: Boolean
}

input TypeRelateToOneForUpdateInput {
  create: TypeCreateInput
  connect: TypeWhereUniqueInput
  disconnect: Boolean
}

input SourceTypeRelateToOneForUpdateInput {
  create: SourceTypeCreateInput
  connect: SourceTypeWhereUniqueInput
  disconnect: Boolean
}

input LanguageRelateToOneForUpdateInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
  disconnect: Boolean
}

input FormatRelateToOneForUpdateInput {
  create: FormatCreateInput
  connect: FormatWhereUniqueInput
  disconnect: Boolean
}

input CostRelateToOneForUpdateInput {
  create: CostCreateInput
  connect: CostWhereUniqueInput
  disconnect: Boolean
}

input SourceKeyRelateToManyForUpdateInput {
  disconnect: [SourceKeyWhereUniqueInput!]
  set: [SourceKeyWhereUniqueInput!]
  create: [SourceKeyCreateInput!]
  connect: [SourceKeyWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input SourceUpdateArgs {
  where: SourceWhereUniqueInput!
  data: SourceUpdateInput!
}

input SourceCreateInput {
  authority_name: String
  url: String
  country: CountryRelateToOneForCreateInput
  region: RegionRelateToOneForCreateInput
  coverage: CoverageRelateToOneForCreateInput
  type: TypeRelateToOneForCreateInput
  source_type: SourceTypeRelateToOneForCreateInput
  language: LanguageRelateToOneForCreateInput
  format: FormatRelateToOneForCreateInput
  comment: String
  cost: CostRelateToOneForCreateInput
  keys: SourceKeyRelateToManyForCreateInput
  createdAt: DateTime
  to_crawler: Boolean
  to_deo: Boolean! = false
  createdBy: UserRelateToOneForCreateInput
}

input CountryRelateToOneForCreateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

input RegionRelateToOneForCreateInput {
  create: RegionCreateInput
  connect: RegionWhereUniqueInput
}

input CoverageRelateToOneForCreateInput {
  create: CoverageCreateInput
  connect: CoverageWhereUniqueInput
}

input TypeRelateToOneForCreateInput {
  create: TypeCreateInput
  connect: TypeWhereUniqueInput
}

input SourceTypeRelateToOneForCreateInput {
  create: SourceTypeCreateInput
  connect: SourceTypeWhereUniqueInput
}

input LanguageRelateToOneForCreateInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

input FormatRelateToOneForCreateInput {
  create: FormatCreateInput
  connect: FormatWhereUniqueInput
}

input CostRelateToOneForCreateInput {
  create: CostCreateInput
  connect: CostWhereUniqueInput
}

input SourceKeyRelateToManyForCreateInput {
  create: [SourceKeyCreateInput!]
  connect: [SourceKeyWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Coverage {
  id: ID!
  name: String
  createdAt: DateTime
}

input CoverageWhereUniqueInput {
  id: ID
}

input CoverageWhereInput {
  AND: [CoverageWhereInput!]
  OR: [CoverageWhereInput!]
  NOT: [CoverageWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
}

input CoverageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input CoverageUpdateInput {
  name: String
  createdAt: DateTime
}

input CoverageUpdateArgs {
  where: CoverageWhereUniqueInput!
  data: CoverageUpdateInput!
}

input CoverageCreateInput {
  name: String
  createdAt: DateTime
}

type Type {
  id: ID!
  name: String
  createdAt: DateTime
}

input TypeWhereUniqueInput {
  id: ID
}

input TypeWhereInput {
  AND: [TypeWhereInput!]
  OR: [TypeWhereInput!]
  NOT: [TypeWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
}

input TypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input TypeUpdateInput {
  name: String
  createdAt: DateTime
}

input TypeUpdateArgs {
  where: TypeWhereUniqueInput!
  data: TypeUpdateInput!
}

input TypeCreateInput {
  name: String
  createdAt: DateTime
}

type Format {
  id: ID!
  name: String
  createdAt: DateTime
}

input FormatWhereUniqueInput {
  id: ID
}

input FormatWhereInput {
  AND: [FormatWhereInput!]
  OR: [FormatWhereInput!]
  NOT: [FormatWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
}

input FormatOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input FormatUpdateInput {
  name: String
  createdAt: DateTime
}

input FormatUpdateArgs {
  where: FormatWhereUniqueInput!
  data: FormatUpdateInput!
}

input FormatCreateInput {
  name: String
  createdAt: DateTime
}

type SourceKey {
  id: ID!
  original_key: String
  map_to: String
  createdAt: DateTime
}

input SourceKeyWhereUniqueInput {
  id: ID
}

input SourceKeyWhereInput {
  AND: [SourceKeyWhereInput!]
  OR: [SourceKeyWhereInput!]
  NOT: [SourceKeyWhereInput!]
  id: IDFilter
  original_key: StringFilter
  map_to: StringFilter
  createdAt: DateTimeNullableFilter
}

input SourceKeyOrderByInput {
  id: OrderDirection
  original_key: OrderDirection
  map_to: OrderDirection
  createdAt: OrderDirection
}

input SourceKeyUpdateInput {
  original_key: String
  map_to: String
  createdAt: DateTime
}

input SourceKeyUpdateArgs {
  where: SourceKeyWhereUniqueInput!
  data: SourceKeyUpdateInput!
}

input SourceKeyCreateInput {
  original_key: String
  map_to: String
  createdAt: DateTime
}

type Cost {
  id: ID!
  name: String
  createdAt: DateTime
}

input CostWhereUniqueInput {
  id: ID
}

input CostWhereInput {
  AND: [CostWhereInput!]
  OR: [CostWhereInput!]
  NOT: [CostWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
}

input CostOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input CostUpdateInput {
  name: String
  createdAt: DateTime
}

input CostUpdateArgs {
  where: CostWhereUniqueInput!
  data: CostUpdateInput!
}

input CostCreateInput {
  name: String
  createdAt: DateTime
}

type Log {
  id: ID!
  operation: String
  previous_data: String
  updated_data: String
  updated_values: String
  updated_by: User
  createdAt: DateTime
}

input LogWhereUniqueInput {
  id: ID
}

input LogWhereInput {
  AND: [LogWhereInput!]
  OR: [LogWhereInput!]
  NOT: [LogWhereInput!]
  id: IDFilter
  operation: StringFilter
  previous_data: StringFilter
  updated_data: StringFilter
  updated_values: StringFilter
  updated_by: UserWhereInput
  createdAt: DateTimeNullableFilter
}

input LogOrderByInput {
  id: OrderDirection
  operation: OrderDirection
  previous_data: OrderDirection
  updated_data: OrderDirection
  updated_values: OrderDirection
  createdAt: OrderDirection
}

input LogUpdateInput {
  operation: String
  previous_data: String
  updated_data: String
  updated_values: String
  updated_by: UserRelateToOneForUpdateInput
  createdAt: DateTime
}

input LogUpdateArgs {
  where: LogWhereUniqueInput!
  data: LogUpdateInput!
}

input LogCreateInput {
  operation: String
  previous_data: String
  updated_data: String
  updated_values: String
  updated_by: UserRelateToOneForCreateInput
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSourceType(data: SourceTypeCreateInput!): SourceType
  createSourceTypes(data: [SourceTypeCreateInput!]!): [SourceType]
  updateSourceType(where: SourceTypeWhereUniqueInput!, data: SourceTypeUpdateInput!): SourceType
  updateSourceTypes(data: [SourceTypeUpdateArgs!]!): [SourceType]
  deleteSourceType(where: SourceTypeWhereUniqueInput!): SourceType
  deleteSourceTypes(where: [SourceTypeWhereUniqueInput!]!): [SourceType]
  createRegion(data: RegionCreateInput!): Region
  createRegions(data: [RegionCreateInput!]!): [Region]
  updateRegion(where: RegionWhereUniqueInput!, data: RegionUpdateInput!): Region
  updateRegions(data: [RegionUpdateArgs!]!): [Region]
  deleteRegion(where: RegionWhereUniqueInput!): Region
  deleteRegions(where: [RegionWhereUniqueInput!]!): [Region]
  createLanguage(data: LanguageCreateInput!): Language
  createLanguages(data: [LanguageCreateInput!]!): [Language]
  updateLanguage(where: LanguageWhereUniqueInput!, data: LanguageUpdateInput!): Language
  updateLanguages(data: [LanguageUpdateArgs!]!): [Language]
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteLanguages(where: [LanguageWhereUniqueInput!]!): [Language]
  createCountry(data: CountryCreateInput!): Country
  createCountries(data: [CountryCreateInput!]!): [Country]
  updateCountry(where: CountryWhereUniqueInput!, data: CountryUpdateInput!): Country
  updateCountries(data: [CountryUpdateArgs!]!): [Country]
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteCountries(where: [CountryWhereUniqueInput!]!): [Country]
  createSource(data: SourceCreateInput!): Source
  createSources(data: [SourceCreateInput!]!): [Source]
  updateSource(where: SourceWhereUniqueInput!, data: SourceUpdateInput!): Source
  updateSources(data: [SourceUpdateArgs!]!): [Source]
  deleteSource(where: SourceWhereUniqueInput!): Source
  deleteSources(where: [SourceWhereUniqueInput!]!): [Source]
  createCoverage(data: CoverageCreateInput!): Coverage
  createCoverages(data: [CoverageCreateInput!]!): [Coverage]
  updateCoverage(where: CoverageWhereUniqueInput!, data: CoverageUpdateInput!): Coverage
  updateCoverages(data: [CoverageUpdateArgs!]!): [Coverage]
  deleteCoverage(where: CoverageWhereUniqueInput!): Coverage
  deleteCoverages(where: [CoverageWhereUniqueInput!]!): [Coverage]
  createType(data: TypeCreateInput!): Type
  createTypes(data: [TypeCreateInput!]!): [Type]
  updateType(where: TypeWhereUniqueInput!, data: TypeUpdateInput!): Type
  updateTypes(data: [TypeUpdateArgs!]!): [Type]
  deleteType(where: TypeWhereUniqueInput!): Type
  deleteTypes(where: [TypeWhereUniqueInput!]!): [Type]
  createFormat(data: FormatCreateInput!): Format
  createFormats(data: [FormatCreateInput!]!): [Format]
  updateFormat(where: FormatWhereUniqueInput!, data: FormatUpdateInput!): Format
  updateFormats(data: [FormatUpdateArgs!]!): [Format]
  deleteFormat(where: FormatWhereUniqueInput!): Format
  deleteFormats(where: [FormatWhereUniqueInput!]!): [Format]
  createSourceKey(data: SourceKeyCreateInput!): SourceKey
  createSourceKeys(data: [SourceKeyCreateInput!]!): [SourceKey]
  updateSourceKey(where: SourceKeyWhereUniqueInput!, data: SourceKeyUpdateInput!): SourceKey
  updateSourceKeys(data: [SourceKeyUpdateArgs!]!): [SourceKey]
  deleteSourceKey(where: SourceKeyWhereUniqueInput!): SourceKey
  deleteSourceKeys(where: [SourceKeyWhereUniqueInput!]!): [SourceKey]
  createCost(data: CostCreateInput!): Cost
  createCosts(data: [CostCreateInput!]!): [Cost]
  updateCost(where: CostWhereUniqueInput!, data: CostUpdateInput!): Cost
  updateCosts(data: [CostUpdateArgs!]!): [Cost]
  deleteCost(where: CostWhereUniqueInput!): Cost
  deleteCosts(where: [CostWhereUniqueInput!]!): [Cost]
  createLog(data: LogCreateInput!): Log
  createLogs(data: [LogCreateInput!]!): [Log]
  updateLog(where: LogWhereUniqueInput!, data: LogUpdateInput!): Log
  updateLogs(data: [LogUpdateArgs!]!): [Log]
  deleteLog(where: LogWhereUniqueInput!): Log
  deleteLogs(where: [LogWhereUniqueInput!]!): [Log]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  sourceTypes(where: SourceTypeWhereInput! = {}, orderBy: [SourceTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SourceTypeWhereUniqueInput): [SourceType!]
  sourceType(where: SourceTypeWhereUniqueInput!): SourceType
  sourceTypesCount(where: SourceTypeWhereInput! = {}): Int
  regions(where: RegionWhereInput! = {}, orderBy: [RegionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RegionWhereUniqueInput): [Region!]
  region(where: RegionWhereUniqueInput!): Region
  regionsCount(where: RegionWhereInput! = {}): Int
  languages(where: LanguageWhereInput! = {}, orderBy: [LanguageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageWhereUniqueInput): [Language!]
  language(where: LanguageWhereUniqueInput!): Language
  languagesCount(where: LanguageWhereInput! = {}): Int
  countries(where: CountryWhereInput! = {}, orderBy: [CountryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CountryWhereUniqueInput): [Country!]
  country(where: CountryWhereUniqueInput!): Country
  countriesCount(where: CountryWhereInput! = {}): Int
  sources(where: SourceWhereInput! = {}, orderBy: [SourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SourceWhereUniqueInput): [Source!]
  source(where: SourceWhereUniqueInput!): Source
  sourcesCount(where: SourceWhereInput! = {}): Int
  coverages(where: CoverageWhereInput! = {}, orderBy: [CoverageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CoverageWhereUniqueInput): [Coverage!]
  coverage(where: CoverageWhereUniqueInput!): Coverage
  coveragesCount(where: CoverageWhereInput! = {}): Int
  types(where: TypeWhereInput! = {}, orderBy: [TypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TypeWhereUniqueInput): [Type!]
  type(where: TypeWhereUniqueInput!): Type
  typesCount(where: TypeWhereInput! = {}): Int
  formats(where: FormatWhereInput! = {}, orderBy: [FormatOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormatWhereUniqueInput): [Format!]
  format(where: FormatWhereUniqueInput!): Format
  formatsCount(where: FormatWhereInput! = {}): Int
  sourceKeys(where: SourceKeyWhereInput! = {}, orderBy: [SourceKeyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SourceKeyWhereUniqueInput): [SourceKey!]
  sourceKey(where: SourceKeyWhereUniqueInput!): SourceKey
  sourceKeysCount(where: SourceKeyWhereInput! = {}): Int
  costs(where: CostWhereInput! = {}, orderBy: [CostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CostWhereUniqueInput): [Cost!]
  cost(where: CostWhereUniqueInput!): Cost
  costsCount(where: CostWhereInput! = {}): Int
  logs(where: LogWhereInput! = {}, orderBy: [LogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogWhereUniqueInput): [Log!]
  log(where: LogWhereUniqueInput!): Log
  logsCount(where: LogWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
