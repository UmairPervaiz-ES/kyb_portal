// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String    @id @default(cuid())
  name                  String    @default("")
  email                 String    @unique @default("")
  password              String
  isAdmin               Boolean   @default(false)
  isSuperAdmin          Boolean   @default(false)
  createdAt             DateTime? @default(now())
  from_Source_createdBy Source[]  @relation("Source_createdBy")
}

model SourceType {
  id                      String    @id @default(cuid())
  name                    String    @default("")
  createdAt               DateTime? @default(now())
  from_Source_source_type Source[]  @relation("Source_source_type")
}

model Region {
  id                 String    @id @default(cuid())
  name               String    @default("")
  createdAt          DateTime? @default(now())
  from_Source_region Source[]  @relation("Source_region")
}

model Language {
  id                    String    @id @default(cuid())
  name                  String    @default("")
  createdAt             DateTime? @default(now())
  from_Source_lanaguage Source[]  @relation("Source_lanaguage")
}

model Country {
  id                  String    @id @default(cuid())
  name                String    @default("")
  createdAt           DateTime? @default(now())
  from_Source_country Source[]  @relation("Source_country")
}

model Source {
  id             String      @id @default(cuid())
  authority_name String      @default("")
  comment        String      @default("")
  cost           String      @default("")
  source_key     SourceKey[] @relation("Source_source_key")
  coverage       Coverage?   @relation("Source_coverage", fields: [coverageId], references: [id])
  coverageId     String?     @map("coverage")
  type           Type?       @relation("Source_type", fields: [typeId], references: [id])
  typeId         String?     @map("type")
  sourced        Sourced?    @relation("Source_sourced", fields: [sourcedId], references: [id])
  sourcedId      String?     @map("sourced")
  createdAt      DateTime?   @default(now())
  to_crawler     Boolean     @default(false) @map("to_crawler")
  to_deo         Boolean     @default(false) @map("to_deo")
  country        Country?    @relation("Source_country", fields: [countryId], references: [id])
  countryId      String?     @map("country")
  region         Region?     @relation("Source_region", fields: [regionId], references: [id])
  regionId       String?     @map("region")
  source_type    SourceType? @relation("Source_source_type", fields: [source_typeId], references: [id])
  source_typeId  String?     @map("source_type")
  lanaguage      Language?   @relation("Source_lanaguage", fields: [lanaguageId], references: [id])
  lanaguageId    String?     @map("language")
  createdBy      User?       @relation("Source_createdBy", fields: [createdById], references: [id])
  createdById    String?     @map("created_by")

  @@index([coverageId])
  @@index([typeId])
  @@index([sourcedId])
  @@index([countryId])
  @@index([regionId])
  @@index([source_typeId])
  @@index([lanaguageId])
  @@index([createdById])
}

model Coverage {
  id                   String    @id @default(cuid())
  name                 String    @default("")
  createdAt            DateTime? @default(now())
  from_Source_coverage Source[]  @relation("Source_coverage")
}

model Type {
  id               String    @id @default(cuid())
  name             String    @default("")
  createdAt        DateTime? @default(now())
  from_Source_type Source[]  @relation("Source_type")
}

model Sourced {
  id                  String    @id @default(cuid())
  name                String    @default("")
  createdAt           DateTime? @default(now())
  from_Source_sourced Source[]  @relation("Source_sourced")
}

model SourceKey {
  id                     String    @id @default(cuid())
  original_key           String    @default("")
  map_to                 String    @default("")
  createdAt              DateTime? @default(now())
  from_Source_source_key Source[]  @relation("Source_source_key")
}
